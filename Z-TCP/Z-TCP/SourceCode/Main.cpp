
#include <stdio.h>
#include <windows.h>

#include "ARP.h"
#include "Ethernet.h"
#include "Basic.h"
#include "Socket.h"
#include "IP.h"
#include "UDP.h"
#include "TCP_Task.h"
#include "TCP.h"
#include "DHCP.h"
#include "ICMP.h"

void Init(void){
	Network_Init();
	Ethernet_Init((uint8_t*)"50:7B:9D:D5:1E:3F");
	IP_Init((uint8_t*)LOCAL_IP, (uint8_t*)GATEWAY_IP);
	ARP_Init();
	DHCP_Init();
}

void CreateTask() {
	/* DHCP主任务 */
#if DHCP_EN
	CreateThread(NULL,0,DHCP_MainTask,0,0,NULL);
	printf("Create DHCP_MainTask\r\n"); 
#endif
	/* 底层数据收发任务 */
	CreateThread(NULL, 0, LLDataProcessLoop, 0, 0, NULL);
	printf("Create LLDataProcessLoop\r\n"); 
	/* 模拟数据输入任务 */
	CreateThread(NULL, 0, SimulateDataInput, 0, 0, NULL);
	printf("Create SimulateDataInput\r\n");
	/* ARP 任务 */
	CreateThread(NULL, 0, ARP_Task, 0, 0, NULL);
	printf("Create ARP_Task\r\n");
}

uint8_t Data1[] = {
	0x47, 0x45, 0x54, 0x20, 0x2f, 0x6a, 0x73, 0x6f,
	0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e,
	0x6a, 0x73, 0x70, 0x20, 0x48, 0x54, 0x54, 0x50,
	0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x74, 0x65,
	0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2c,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74,
	0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c, 0x2c, 0x20,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a, 0x78,
	0x72, 0x2c, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x3a,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e,
	0x31, 0x30, 0x33, 0x2e, 0x32, 0x31, 0x35, 0x3a,
	0x38, 0x30, 0x38, 0x31, 0x2f, 0x0d, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20,
	0x7a, 0x68, 0x2d, 0x48, 0x61, 0x6e, 0x73, 0x2d,
	0x43, 0x4e, 0x2c, 0x7a, 0x68, 0x2d, 0x48, 0x61,
	0x6e, 0x73, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x37,
	0x2c, 0x6a, 0x61, 0x3b, 0x71, 0x3d, 0x30, 0x2e,
	0x33, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d,
	0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35,
	0x2e, 0x30, 0x20, 0x28, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x31,
	0x30, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x4f, 0x57,
	0x36, 0x34, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x2f, 0x37, 0x2e, 0x30, 0x3b,
	0x20, 0x72, 0x76, 0x3a, 0x31, 0x31, 0x2e, 0x30,
	0x29, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47,
	0x65, 0x63, 0x6b, 0x6f, 0x0d, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x67,
	0x7a, 0x69, 0x70, 0x2c, 0x20, 0x64, 0x65, 0x66,
	0x6c, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x48, 0x6f,
	0x73, 0x74, 0x3a, 0x20, 0x31, 0x39, 0x32, 0x2e,
	0x31, 0x36, 0x38, 0x2e, 0x31, 0x30, 0x33, 0x2e,
	0x32, 0x31, 0x35, 0x3a, 0x38, 0x30, 0x38, 0x31,
	0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65,
	0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x0d, 0x0a, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x3a, 0x20, 0x6a, 0x73, 0x6f, 0x61, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x7a,
	0x68, 0x61, 0x6f, 0x6a, 0x69, 0x6e, 0x67, 0x79,
	0x61, 0x6e, 0x67, 0x63, 0x68, 0x75, 0x6e, 0x3b,
	0x20, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x77, 0x64,
	0x3d, 0x31, 0x3b, 0x20, 0x6a, 0x73, 0x6f, 0x61,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x3d,
	0x7a, 0x6a, 0x79, 0x63, 0x31, 0x32, 0x33, 0x34,
	0x0d, 0x0a, 0x0d, 0x0a,
};

void TCP_Test() {
	ADDR NewADDR = { 0 };
	NewADDR.LocalPort = 1555;
	NewADDR.RemoteIP = IP_Str2Int("192.168.103.215");
	NewADDR.RemotePort = 8081;
	ARP_AddItem(&IP_Str2Int("192.168.103.215"),&MAC_Str2Int("0C:12:62:B8:5A:98"), ARP_TTL_MAX);
	Socket * pSocket = prvSocket_New(&NewADDR, IP_Protocol_TCP);
	Socket_Config(pSocket, TCP_MSS,1460);
	Socket_Config(pSocket, TCP_WIN_SIZE, 65535);
	Socket_Config(pSocket, TCP_WIN_SCALE, 8);
	Socket_Config(pSocket, TCP_INIT_SN, 0x115F2ACB);
	Socket_Config(pSocket, TCP_TSOPT, 1); 
	Socket_Config(pSocket, TCP_SACK, 1);
	Socket_Connect(pSocket);
	Socket_Send(pSocket, Data1,sizeof(Data1));
}

int main(void)
{
	Init();
	CreateTask();
	TCP_Test();
	while (1) {
		Sleep(1000);
	}
}

















